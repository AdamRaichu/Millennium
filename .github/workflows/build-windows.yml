name: Build Millennium (Windows)

on:
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: windows-latest

    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # allow fortnite wallhacks
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    strategy:
      fail-fast: false
      matrix:
        include:
          - sys: mingw32
            env: i686

    steps:

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: (Setup) Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: (Setup) Assets Build Environment
      run: cd assets && npm install && npm run dev
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: (Setup) Build Assets
      run: . scripts\ci\mk-assets.ps1
    
    - name: (Setup) Construct Python Environment
      run: . scripts\ci\setup-python.ps1 D:/a/env/ext/data/cache

    - name: (Setup) Semantic Release
      run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # dry run to get the next version
    - name: Bump Version
      id: read_version
      run: . scripts\ci\bump-version.ps1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up cache for Python source
      uses: actions/cache@v3
      id: build-cache
      with:
        path: Python-3.11.8/PCbuild/win32
        key: ${{ runner.os }}-python-3.11.8-build
        restore-keys: ${{ runner.os }}-python-3.11.8-build-  

    - name: (Python) Add msbuild to PATH
      if: steps.build-cache.outputs.cache-hit != 'true'
      uses: microsoft/setup-msbuild@v2

    - name: (Python) Download 3.11.8 win32 source
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: . scripts\ci\build-python.ps1

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: python 3.11.8 build libraries
        path: D:/a/Millennium/Millennium/build/python

    - name: Install prerequisites
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        install: >-
          mingw-w64-${{ matrix.env }}-libgcrypt
          mingw-w64-${{ matrix.env }}-gcc
          mingw-w64-${{ matrix.env }}-cmake
          mingw-w64-${{ matrix.env }}-ninja

    - name: (Dependency) Install vcpkg
      shell: pwsh
      run: ./vendor/vcpkg/bootstrap-vcpkg.bat && ./vendor/vcpkg/vcpkg integrate install

    - name: (Generator) Configure CMake
      shell: msys2 {0}
      run: cmake --preset=windows-mingw-release -DGITHUB_ACTION_BUILD=ON

    - name: Build Millennium
      shell: msys2 {0}
      run: |
        mkdir D:/a/Millennium/Millennium/build/artifacts
        cmake --build build --config Release
        cp D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311.dll D:/a/env/python311.dll
        cp /d/a/Millennium/Millennium/build/user32.dll  D:/a/env/user32.dll
        mkdir D:/a/env/ext/bin
        cp /d/a/Millennium/Millennium/build/cli/millennium.exe D:/a/env/ext/bin/millennium.exe

    - name: Zip Build Artifact
      run: Get-ChildItem -Path "D:/a/env/" | Compress-Archive -DestinationPath "D:/a/env/millennium-v${{ steps.read_version.outputs.version }}-windows-x86_64.zip"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: millennium
        path: D:/a/env/

    # - name: Setup | Run Semantic Release
    #   run: npx semantic-release
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}